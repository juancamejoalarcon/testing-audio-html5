{"version":3,"sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/./src/util/index.js","webpack://WaveSurfer/./src/util/get-id.js","webpack://WaveSurfer/./src/util/observer.js","webpack://WaveSurfer/./src/util/style.js","webpack://WaveSurfer/./src/util/request-animation-frame.js","webpack://WaveSurfer/./src/webaudio.js","webpack://WaveSurfer/./src/mediaelement.js","webpack://WaveSurfer/./src/wavesurfer.js","webpack://WaveSurfer/./src/util/max.js","webpack://WaveSurfer/./src/util/min.js","webpack://WaveSurfer/./src/util/frame.js","webpack://WaveSurfer/./node_modules/debounce/index.js","webpack://WaveSurfer/./src/util/prevent-click.js","webpack://WaveSurfer/./src/util/fetch.js","webpack://WaveSurfer/./src/util/clamp.js","webpack://WaveSurfer/./src/drawer.multicanvas.js","webpack://WaveSurfer/./src/drawer.js","webpack://WaveSurfer/./src/drawer.canvasentry.js","webpack://WaveSurfer/./src/peakcache.js","webpack://WaveSurfer/./src/mediaelement-webaudio.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","prefix","undefined","Math","random","toString","substring","Observer","_disabledEventEmissions","handlers","event","fn","push","callback","un","e","length","splice","handler","on","args","apply","setTimeout","eventNames","includes","_isDisabledEventEmission","forEach","el","styles","keys","prop","style","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","element","PLAYING","PAUSED","FINISHED","WebAudio","params","audioContext","offlineAudioContext","stateBehaviors","init","addOnAudioProcess","getPlayedPercents","duration","getDuration","getCurrentTime","startPosition","getPlayedTime","removeOnAudioProcess","fireEvent","ac","supportsWebAudio","getAudioContext","lastPlay","currentTime","scheduledPause","states","buffer","filters","gainNode","mergedPeaks","offlineAc","peaks","playbackRate","analyser","scriptNode","source","splitPeaks","state","explicitDuration","destroyed","AudioContext","webkitAudioContext","WaveSurferAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","createVolumeNode","createScriptNode","createAnalyserNode","setState","setPlaybackRate","audioRate","setLength","filter","disconnect","connect","setFilters","disconnectFilters","reduce","prev","curr","audioScriptProcessor","createScriptProcessor","scriptBufferSize","createJavaScriptNode","destination","onaudioprocess","time","pause","createAnalyser","createGain","createGainNode","deviceId","audio","Audio","setSinkId","Promise","reject","Error","autoplay","dest","createMediaStreamDestination","srcObject","stream","gain","setValueAtTime","arraybuffer","errback","getOfflineAudioContext","decodeAudioData","then","data","catch","err","channels","numberOfChannels","first","last","splitChannels","newBuffer","createBuffer","sampleSize","sampleStep","chan","getChannelData","start","end","min","max","j","disconnectSource","closeAudioContext","close","isPaused","unAll","destroyWebAudio","createSource","createBufferSource","noteGrainOn","stop","noteOff","resume","adjustedTime","seekTo","resumeAudioContext","play","util","MediaElement","media","paused","volume","mediaType","toLowerCase","elementPosition","isMuted","onPlayEnd","mediaListeners","createTimer","error","canplay","ended","seeked","volumechange","muted","id","removeEventListener","addEventListener","onAudioProcess","frame","url","container","preload","document","createElement","controls","mediaControls","src","width","prevMedia","querySelector","removeChild","appendChild","_load","elt","HTMLMediaElement","load","_setupMediaListeners","setVolume","Infinity","seekable","clearPlayEnd","promise","setPlayEnd","_onPlayEnd","removeMediaElementOnDestroy","parentNode","WaveSurfer","defaultParams","autoCenter","autoCenterRate","autoCenterImmediately","backend","backgroundColor","barHeight","barRadius","barGap","barMinHeight","cursorColor","cursorWidth","dragSelection","drawingContextAttributes","desynchronized","fillParent","forceDecode","height","hideScrollbar","interact","loopSelection","maxCanvasWidth","mediaContainer","minPxPerSec","normalize","partialRender","pixelRatio","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","progressColor","renderer","MultiCanvas","responsive","rtl","scrollParent","skipLength","splitChannelsOptions","overlay","channelColors","filterChannels","waveColor","xhr","backends","MediaElementWebAudio","assign","transform","setBackgroundColor","savedVolume","tmpEvents","currentRequest","drawer","peakCache","Drawer","Backend","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","debounce","wrapper","clientWidth","registerPlugins","createDrawer","createBackend","createPeakCache","plugin","addPlugin","deferInit","initPlugin","instance","staticProps","pluginStaticProp","Instance","getOwnPropertyNames","destroyPlugin","destroy","drawBuffer","progress","newVolume","getVolume","PeakCache","seconds","position","skip","offset","seekAndCenter","recenter","isFinite","oldScrollParent","rate","getPlaybackRate","setMute","mute","color","background","updateCursor","setHeight","channelIndices","nominalWidth","round","parentWidth","getWidth","newRanges","addRangeToPeakCache","getPeaks","drawPeaks","pxPerSec","decodeArrayBuffer","loadDecodedBuffer","blob","reader","FileReader","onProgress","loadArrayBuffer","target","result","readAsArrayBuffer","empty","preloadIgnoreReasons","indexOf","activeReasons","reason","console","warn","join","loadBuffer","loadMediaElement","action","once","getArrayBuffer","setPeaks","urlOrElt","loadElt","options","responseType","request","fetchFile","percentComplete","lengthComputable","loaded","total","accuracy","noWindow","arr","map","val","resolve","json","JSON","stringify","open","encodeURIComponent","format","quality","type","getImage","controller","_reader","cancel","abort","cancelAjax","clearTmpEvents","setWidth","destroyAllPlugins","VERSION","__VERSION__","values","largest","smallest","Number","func","wait","immediate","timeout","context","timestamp","later","Date","now","debounced","arguments","callNow","clear","clearTimeout","flush","preventClickHandler","stopPropagation","body","fetchHeaders","Headers","fetchRequest","Request","AbortController","requestHeaders","header","append","fetchOptions","method","headers","credentials","cache","redirect","referrer","signal","fetch","response","progressAvailable","contentLength","Response","ReadableStream","ProgressHandler","errMsg","ok","arrayBuffer","text","status","getReader","parseInt","read","done","byteLength","enqueue","maxCanvasElementWidth","hasProgressCanvas","halfPixel","canvases","progressWave","EntryClass","CanvasEntry","canvasContextAttributes","overlap","ceil","createWrapper","createElements","zIndex","left","top","bottom","overflow","display","boxSizing","borderRightStyle","pointerEvents","addCanvas","borderRightWidth","borderRightColor","totalWidth","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","entry","updateDimensions","clearWave","leftOffset","initWave","initProgress","lastEntry","wave","parentElement","pop","elementWidth","channelIndex","prepareDraw","absmax","hasMinVals","offsetY","halfH","peakIndexScale","bar","barWidth","step","scale","peak","floor","h","fillRect","reflectedPeaks","len","drawLine","setFillStyles","drawLines","x","y","radius","startCanvas","endCanvas","intersection","x1","y1","x2","y2","fillRects","drawIndex","Array","filteredChannels","hideChannel","channelPeaks","some","all","images","lastPos","userSelect","webkitUserSelect","overflowX","overflowY","setupWrapperEvents","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","right","scrollLeft","scrollWidth","clamp","scrollbarHeight","offsetHeight","clientHeight","clientY","handleEvent","drawBars","drawWave","percent","recenterOnPosition","half","maxScroll","updateSize","minPxDelta","pos","newPos","updateProgress","waveCtx","progressCtx","constructor","getContext","offsetLeft","elementSize","clearRect","canvas","fillStyle","fillRectToContext","ctx","drawRoundedRect","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","drawLineToContext","canvasStart","canvasEnd","halfOffset","absmaxHalf","toBlob","toDataURL","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","concat","sort","a","b","uncachedRangePairs","peakCacheRangePairs","sourceMediaElement","createMediaElementSource","mediaElement"],"mappings":"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","file":"wavesurfer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","export { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as Observer } from './observer';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\nexport { default as clamp } from './clamp';\n","/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n","/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this._disabledEventEmissions = [];\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Disable firing a list of events by name. When specified, event handlers for any event type\n     * passed in here will not be called.\n     *\n     * @since 4.0.0\n     * @param {string[]} eventNames an array of event names to disable emissions for\n     * @example\n     * // disable seek and interaction events\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n     */\n    setDisabledEventEmissions(eventNames) {\n        this._disabledEventEmissions = eventNames;\n    }\n\n    /**\n     * plugins borrow part of this class without calling the constructor,\n     * so we have to be careful about _disabledEventEmissions\n     */\n\n    _isDisabledEventEmission(event) {\n        return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers || this._isDisabledEventEmission(event)) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n","/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n","/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n","import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** scriptBufferSize: size of the processing buffer */\n    static scriptBufferSize = 256;\n    /** audioContext: allows to process audio with WebAudio API */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** ac: Audio Context instance */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** gainNode: allows to control audio volume */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** analyser: provides audio analysis information */\n        this.analyser = null;\n        /** scriptNode: allows processing audio */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n        /**\n         * Boolean indicating if the backend was destroyed.\n         */\n        this.destroyed = false;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n    /** Create ScriptProcessorNode to process audio */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n        } else {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(\n                    WebAudio.scriptBufferSize\n                );\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(\n                    WebAudio.scriptBufferSize\n                );\n            }\n        }\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {};\n    }\n    /** Create analyser node to perform audio analysis */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            let audio = new window.Audio();\n            if (!audio.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            audio.autoplay = true;\n            var dest = this.ac.createMediaStreamDestination();\n            this.gainNode.disconnect();\n            this.gainNode.connect(dest);\n            audio.srcObject = dest.stream;\n\n            return audio.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        if ('AudioContext' in window) {\n            this.offlineAc.decodeAudioData(arraybuffer).then(\n                (data) => callback(data)\n            ).catch(\n                (err) => errback(err)\n            );\n        } else {\n            // Safari: no support for Promise-based decodeAudioData yet\n            this.offlineAc.decodeAudioData(\n                arraybuffer,\n                data => callback(data),\n                errback\n            );\n        }\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                /**\n                 * Initialize the max and min to the first sample of this\n                 * subrange, so that even if the samples are entirely\n                 * on one side of zero, we still return the true max and\n                 * min values in the subrange.\n                 */\n                let min = chan[start];\n                let max = min;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n    /**\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n     */\n    destroyWebAudio() {\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n    }\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.destroyed = true;\n\n        this.destroyWebAudio();\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * @private\n     *\n     * some browsers require an explicit call to #resume before they will play back audio\n     */\n    resumeAudioContext() {\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start);\n\n        this.resumeAudioContext();\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        this.source && this.source.stop(0);\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        value = value || 1;\n        if (this.isPaused()) {\n            this.playbackRate = value;\n        } else {\n            this.pause();\n            this.playbackRate = value;\n            this.play();\n        }\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} end Position to end at\n     * @version 3.3.0\n     */\n    setPlayEnd(end) {\n        this.scheduledPause = end;\n    }\n}\n","import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        /**\n         * Initially a dummy media element to catch errors. Once `_load` is\n         * called, this will contain the actual `HTMLMediaElement`.\n         * @private\n         */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n        /** @private */\n        this.mediaListeners = {};\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n    _setupMediaListeners() {\n        this.mediaListeners.error = () => {\n            this.fireEvent('error', 'Error loading media element');\n        };\n        this.mediaListeners.canplay = () => {\n            this.fireEvent('canplay');\n        };\n        this.mediaListeners.ended = () => {\n            this.fireEvent('finish');\n        };\n        // listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        this.mediaListeners.play = () => {\n            this.fireEvent('play');\n        };\n        this.mediaListeners.pause = () => {\n            this.fireEvent('pause');\n        };\n        this.mediaListeners.seeked = event => {\n            this.fireEvent('seek');\n        };\n        this.mediaListeners.volumechange = event => {\n            this.isMuted = this.media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = this.media.volume;\n            }\n            this.fireEvent('volume');\n        };\n\n        // reset event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            this.media.removeEventListener(id, this.mediaListeners[id]);\n            this.media.addEventListener(id, this.mediaListeners[id]);\n        });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks, preload);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks, elt.preload);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n    _load(media, peaks, preload) {\n        // verify media element is valid\n        if (\n            !(media instanceof HTMLMediaElement) ||\n            typeof media.addEventListener === 'undefined'\n        ) {\n            throw new Error('media parameter is not a valid media element');\n        }\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        //\n        // note that we avoid calling media.load here when given peaks and preload == 'none'\n        // as this almost always triggers some browser fetch of the media.\n        if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        this.media = media;\n        this._setupMediaListeners();\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this.clearPlayEnd();\n\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @since 4.0.0\n     * @param {boolean} muted Specify `true` to mute audio.\n     */\n    setMute(muted) {\n        // This causes a volume change to be emitted too through the\n        // volumechange event listener.\n        this.isMuted = this.media.muted = muted;\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n        this.destroyed = true;\n\n        // cleanup media event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            if (this.media) {\n                this.media.removeEventListener(id, this.mediaListeners[id]);\n            }\n        });\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n","import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\nimport MediaElementWebAudio from './mediaelement-webaudio';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n * eliminating waveform gaps\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n * attributes.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        autoCenterRate: 5,\n        autoCenterImmediately: false,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barRadius: 0,\n        barGap: null,\n        barMinHeight: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        drawingContextAttributes: {\n            // Boolean that hints the user agent to reduce the latency\n            // by desynchronizing the canvas paint cycle from the event\n            // loop\n            desynchronized: false\n        },\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        splitChannelsOptions: {\n            overlay: false,\n            channelColors: {},\n            filterChannels: []\n        },\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio,\n        MediaElementWebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = Object.assign({}, this.defaultParams, params);\n\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            util.style(this.container, { transform: 'rotateY(180deg)' });\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            (this.params.backend == 'WebAudio' ||\n                this.params.backend === 'MediaElementWebAudio') &&\n            !WebAudio.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    this.drawer.fireEvent('redraw');\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement and MediaElementWebAudio backend\n        if (\n            this.params.backend === 'MediaElement' ||\n            this.params.backend === 'MediaElementWebAudio'\n        ) {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} position Position (in seconds) to stop at\n     * @version 3.3.0\n     */\n    setPlayEnd(position) {\n        this.backend.setPlayEnd(position);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (this.backend.setMute) {\n            // Backends such as the MediaElement backend have their own handling\n            // of mute, let them handle it.\n            this.backend.setMute(mute);\n            this.isMuted = mute;\n        } else {\n            if (mute) {\n                // If currently not muted then save current volume,\n                // turn off the volume and update the mute properties\n                this.savedVolume = this.backend.getVolume();\n                this.backend.setVolume(0);\n                this.isMuted = true;\n                this.fireEvent('volume', 0);\n            } else {\n                // If currently muted then restore to the saved volume\n                // and update the mute properties\n                this.backend.setVolume(this.savedVolume);\n                this.isMuted = false;\n                this.fireEvent('volume', this.savedVolume);\n            }\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getWaveColor() {\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color) {\n        this.params.waveColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getProgressColor() {\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color) {\n        this.params.progressColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Hide channels from being drawn on the waveform if splitting channels.\n     *\n     * For example, if we want to draw only the peaks for the right stereo channel:\n     *\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n     * wavesurfer.load('stereo_audio.mp3');\n     *\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n     *\n     * @param {array} channelIndices Channels to be filtered out from drawing.\n     * @version 4.0.0\n     */\n    setFilteredChannels(channelIndices) {\n        this.params.splitChannelsOptions.filterChannels = channelIndices;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.isReady = true;\n        this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        if (!url) {\n            throw new Error('url parameter cannot be empty');\n        }\n        this.empty();\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\n                        this.params.backend\n                    ) === -1,\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n            case 'MediaElementWebAudio':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                // ignore when backend was already destroyed\n                if (!this.backend.destroyed) {\n                    this.drawBuffer();\n                    this.isReady = true;\n                    this.fireEvent('ready');\n                }\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If peaks are provided, render them and fire the `waveform-ready` event.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n        }\n\n        // If no pre-decoded peaks are provided, or are provided with\n        // forceDecode flag, attempt to download the audio file and decode it\n        // with Web Audio.\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        this.arraybuffer = arraybuffer;\n        this.backend.decodeArrayBuffer(\n            arraybuffer,\n            data => {\n                // Only use the decoded data if we haven't been destroyed or\n                // another decode started in the meantime\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                    callback(data);\n                    this.arraybuffer = null;\n                }\n            },\n            () => this.fireEvent('error', 'Error decoding audiobuffer')\n        );\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = Object.assign(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', e);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and opens in a new window.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks\n     * @param {number} accuracy=10000\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @param {number} end End index\n     * @return {Promise} Promise that resolves with array of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start, end) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start, end);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n        return new Promise((resolve, reject) => {\n            const json = JSON.stringify(arr);\n\n            if (!noWindow) {\n                window.open(\n                    'data:application/json;charset=utf-8,' +\n                        encodeURIComponent(json)\n                );\n            }\n            resolve(json);\n        });\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `'image/png'`. Other supported types are\n     * `'image/jpeg'` and `'image/webp'`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `'image/png'`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `'image/jpeg'`` and `'image/webp'`.\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\n     * or 'blob'.\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\n            // See: Wavesurfer issue #2042\n            // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\n            if (this.currentRequest._reader) {\n                // Ignoring exceptions thrown by call to cancel()\n                this.currentRequest._reader.cancel().catch(err => {});\n            }\n\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n\n        // empty drawer\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        if (this.backend) {\n            this.backend.destroy();\n        }\n        if (this.drawer) {\n            this.drawer.destroy();\n        }\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n","/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n","/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n","import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n","/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n","/**\n * Returns a number limited to the given range.\n *\n * @param {number} val The number to be limited to a range\n * @param {number} min The lower boundary of the limit range\n * @param {number} max The upper boundary of the limit range\n * @returns {number} A number in the range [min, max]\n */\nexport default function clamp(val, min, max) {\n    return Math.min(Math.max(min, val), max);\n}\n","import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Canvas 2d context attributes.\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = params.drawingContextAttributes;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n        /**\n         * The radius of the wave bars. Makes bars rounded\n         *\n         * @type {number}\n         */\n        this.barRadius = params.barRadius || 0;\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     */\n    createElements() {\n        this.progressWave = this.wrapper.appendChild(\n            this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 3,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                pointerEvents: 'none'\n            })\n        );\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.canvasContextAttributes = this.canvasContextAttributes;\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        entry.initWave(\n            this.wrapper.appendChild(\n                this.style(document.createElement('canvas'), {\n                    position: 'absolute',\n                    zIndex: 2,\n                    left: leftOffset + 'px',\n                    top: 0,\n                    bottom: 0,\n                    height: '100%',\n                    pointerEvents: 'none'\n                })\n            )\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            entry.initProgress(\n                this.progressWave.appendChild(\n                    this.style(document.createElement('canvas'), {\n                        position: 'absolute',\n                        left: leftOffset + 'px',\n                        top: 0,\n                        bottom: 0,\n                        height: '100%'\n                    })\n                )\n            );\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        util.frame(() => {\n            this.canvases.forEach(entry => entry.clearWave());\n        })();\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                            this.params.pixelRatio,\n                            this.params.barGap * this.params.pixelRatio\n                        );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let i = first;\n\n                for (i; i < last; i += step) {\n                    const peak =\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                    let h = Math.round((peak / absmax) * halfH);\n\n                    /* in case of silences, allow the user to specify that we\n                     * always draw *something* (normally a 1px high bar) */\n                    if (h == 0 && this.params.barMinHeight)\n                        h = this.params.barMinHeight;\n\n                    this.fillRect(\n                        i + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2,\n                        this.barRadius\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel,\n                    this.barRadius\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     * @param {channelIndex} channelIndex The channel index of the line drawn\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n        const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n        this.canvases.forEach((entry, i) => {\n            this.setFillStyles(entry, waveColor, progressColor);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRect(x, y, width, height, radius) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                this.setFillStyles(entry);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1,\n                    radius\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns whether to hide the channel from being drawn based on params.\n     *\n     * @param {number} channelIndex The index of the current channel.\n     * @returns {bool} True to hide the channel, false to draw.\n     */\n    hideChannel(channelIndex) {\n        return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @param {number} drawIndex The index of the current channel after filtering.\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn, drawIndex) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n\n                if (this.params.splitChannels) {\n                    const filteredChannels = channels.filter((c, i) => !this.hideChannel(i));\n                    if (!this.params.splitChannelsOptions.overlay) {\n                        this.setHeight(\n                            Math.max(filteredChannels.length, 1) *\n                                this.params.height *\n                                this.params.pixelRatio\n                        );\n                    }\n\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks))\n                    );\n                }\n                peaks = channels[0];\n            }\n\n            // Return and do not draw channel peaks if hidden.\n            if (this.hideChannel(channelIndex)) {\n                return;\n            }\n\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                const max = util.max(peaks);\n                const min = util.min(peaks);\n                absmax = -min > max ? -min : max;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const offsetY = height * drawIndex || 0;\n            const halfH = height / 2;\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks,\n                channelIndex: channelIndex\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {string} waveColor Wave color to draw this entry\n     * @param {string} progressColor Progress color to draw this entry\n     */\n    setFillStyles(entry, waveColor = this.params.waveColor, progressColor = this.params.progressColor) {\n        entry.setFillStyles(waveColor, progressColor);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n","import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n\n        this.container = container;\n        /**\n         * @type {WavesurferParams}\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = this.container.appendChild(\n            document.createElement('wave')\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = e.targetTouches\n            ? e.targetTouches[0].clientX\n            : e.clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress =\n                (this.params.rtl ? bbox.right - clientX : clientX - bbox.left) *\n                    (this.params.pixelRatio / nominalWidth) || 0;\n        } else {\n            progress =\n                ((this.params.rtl\n                    ? bbox.right - clientX\n                    : clientX - bbox.left) +\n                    this.wrapper.scrollLeft) /\n                    this.wrapper.scrollWidth || 0;\n        }\n\n        return util.clamp(progress, 0, 1);\n    }\n\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const scrollbarHeight =\n                this.wrapper.offsetHeight - this.wrapper.clientHeight;\n            if (scrollbarHeight !== 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('dblclick', e => {\n            if (this.params.interact) {\n                this.fireEvent('dblclick', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // set rate at which waveform is centered\n            let rate = this.params.autoCenterRate;\n\n            // make rate depend on width of view and length of waveform\n            rate /= half;\n            rate *= maxScroll;\n\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            this.style(this.wrapper, {\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(\n                    newPos,\n                    this.params.autoCenterImmediately\n                );\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container) {\n                this.container.removeChild(this.wrapper);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n","/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(\n            typeof this.constructor.name !== 'undefined'\n                ? this.constructor.name.toLowerCase() + '_'\n                : 'canvasentry_'\n        );\n        /**\n         * Canvas 2d context attributes\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = {};\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext(\n            '2d',\n            this.canvasContextAttributes\n        );\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     *\n     * @param {string} waveColor Fill color for the wave canvas\n     * @param {?string} progressColor Fill color for the progress canvas\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = waveColor;\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = progressColor;\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRects(x, y, width, height, radius) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(\n                this.progressCtx,\n                x,\n                y,\n                width,\n                height,\n                radius\n            );\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height, radius) {\n        if (!ctx) {\n            return;\n        }\n\n        if (radius) {\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\n        } else {\n            ctx.fillRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n    drawRoundedRect(ctx, x, y, width, height, radius) {\n        if (height === 0) {\n            return;\n        }\n        // peaks are float values from -1 to 1. Use absolute height values in\n        // order to correctly calculate rounded rectangle coordinates\n        if (height < 0) {\n            height *= -1;\n            y -= height;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(\n            x + width,\n            y + height,\n            x + width - radius,\n            y + height\n        );\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n                Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n","/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n","import MediaElement from './mediaelement';\n\n/**\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\n * of the webaudio API.\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\n *\n * @since 3.2.0\n */\nexport default class MediaElementWebAudio extends MediaElement {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.sourceMediaElement = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @private\n     */\n    _load(media, peaks, preload) {\n        super._load(media, peaks, preload);\n        this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n    createMediaElementSource(mediaElement) {\n        this.sourceMediaElement = this.ac.createMediaElementSource(\n            mediaElement\n        );\n        this.sourceMediaElement.connect(this.analyser);\n    }\n\n    play(start, end) {\n        this.resumeAudioContext();\n        return super.play(start, end);\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        super.destroy();\n\n        this.destroyWebAudio();\n    }\n}\n"],"sourceRoot":""}